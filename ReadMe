Advika Deodhar
CS 464
Lab Section 6-9pm

_______________________________________My notes as I was coding________________________________________
First Step:
- make sure that I can open the pcap files and read a packet
- want to read a packet one by one and store it in a buffer that is as large as a packet
    - pcap_open_offline() - will open the file, save the file descriptor, and save any errors in error buffer
        - if cannot open the file (returned file descriptor is NULL), return error to STDERR
    - pcap_next_ex() - reads the next packet and returns success or failure
        - returns 0 if no packets to read
        - returns 1 if the packet gets read
        - -1 means there is an error
        - -2 means end of file is reached

Reading Ethernet Header:
- pcap_next_ex will return a pointer to the start of the packet payload
- first 14 bytes are guaranteed to be the Ethernet header
- The destination MAC address (6 bytes) then the source MAC address (6 bytes) then the type of the following data (2 bytes) 
- Store this info into a struct
- read out from the struct
- also keep global counter of how many packets there are total? 
- use the ethernet print functions to print it out right

Reading the IP header: 
- the structs that are being made are going to match the exact bytes that get read out, will split up the fields while reading the struct and printing them out 
- keep a global pointer of where I am in the packet
- after reading the ethernet header, move the global variable forward 14 bytes
- assign that pointer to the ip header struct, the feilds will get filled in automatically
- then read out the ip fields, doing the network to host conversions before printing them out
- for the checksum, use memcpy
- NEED TO MAKE SURE TO MOVE GLOBAL PTR BACK TO START OF PACKET WHEN DONE READING
- have if statments for what the protocol type is so that it can print out UDP or TCP next

Printing out TCP:
- need to build that from IP? take parts and memcpy them? 
- make a buffer with the size of pseudoheader + maximum tcp size
- tcp = ip total length - ip header length
TCP CHECKSUM:
- need to create the pseudo header from the data given in ip
- helps you error check and make sure the TCP level is correct before moving to IP level
- since the data for the pseudoheader and the TCP segment come from different places, need to put them together in a buffer
- malloc for the size of the buffer
- use memcpy to copy things from the packet into the buffer
- then call the checksum on the entire buffer
